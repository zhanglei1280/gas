{"version":3,"sources":["images/webgl-logo-256.jpg","GL.js","Q1.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GL","_this","this","Object","classCallCheck","currentTime","Date","now","render","renderer","scene","camera","animate","deltaTime","fracTime","angle","Math","PI","cube","rotation","y","run","requestAnimationFrame","canvas","document","querySelector","console","log","WebGLRenderer","antialias","width","height","setSize","Scene","PerspectiveCamera","map","TextureLoader","load","texture","material","MeshBasicMaterial","geometry","BoxGeometry","Mesh","position","z","x","add","Q1","componentDidMount","react_default","a","createElement","id","style","border","backgroundColor","Component","App","window","WebGLRenderingContext","alert","src_Q1","Boolean","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gRCWnBC,EAQjB,SAAAA,IAAa,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAF,GAAAE,KAFbG,YAAcC,KAAKC,MAENL,KA4BbM,OAAS,WACLP,EAAKQ,SAASD,OACVP,EAAKS,MACLT,EAAKU,SA/BAT,KAmCbU,QAAU,WACN,IAAML,EAAMD,KAAKC,MACXM,EAAYN,EAAMN,EAAKI,YAC7BJ,EAAKI,YAAcE,EACnB,IAAMO,EAAWD,EAAY,IACvBE,EAAQ,GAAMC,KAAKC,GAAK,EAAIH,EAClCb,EAAKiB,KAAKC,SAASC,GAAKL,GAzCfb,KA4CbmB,IAAM,WACFC,sBAAsBrB,EAAKoB,KAC3BpB,EAAKO,SACLP,EAAKW,WA9CL,IAAMW,EAASC,SAASC,cAAc,gBACtCC,QAAQC,IAAIJ,GACZrB,KAAKO,SAAW,IAAImB,IAAc,CAC9BL,SACAM,WAAW,IALN,IAOFC,EAAiBP,EAAjBO,MAAOC,EAAUR,EAAVQ,OACd7B,KAAKO,SAASuB,QAAQF,EAAOC,GAC7B7B,KAAKQ,MAAQ,IAAIuB,IACjB/B,KAAKS,OAAS,IAAIuB,IACd,GACAJ,EAAQC,EACR,EACA,KAEJ,IAAMI,GAAM,IAAIC,KAAgBC,KAAKC,KAC/BC,EAAW,IAAIC,IAAkB,CAACL,QAClCM,EAAW,IAAIC,IAAY,EAAG,EAAG,GACvCxC,KAAKgB,KAAO,IAAIyB,IAAKF,EAAUF,GAE/BrC,KAAKgB,KAAK0B,SAASC,GAAK,EACxB3C,KAAKgB,KAAKC,SAAS2B,EAAI9B,KAAKC,GAAK,EACjCf,KAAKgB,KAAKC,SAASC,EAAIJ,KAAKC,GAAK,EAEjCf,KAAKQ,MAAMqC,IAAI7C,KAAKgB,OClBb8B,6MApBbC,kBAAoB,YACP,IAAIjD,GACZqB,+EAIH,OACE6B,EAAAC,EAAAC,cAAA,UACAC,GAAG,cACHC,MAAO,CACLC,OAAQ,OACRC,gBAAiB,SAEnB1B,MAAM,MAAMC,OAAO,eAfR0B,aCeFC,6MAbbT,kBAAoB,WACdU,OAAOC,uBACTC,MAAM,uHAKR,OACEX,EAAAC,EAAAC,cAACU,EAAD,aAVYL,aCQEM,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCTNC,IAAS3D,OAAO0C,EAAAC,EAAAC,cAACgB,EAAD,MAAS5C,SAAS6C,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.51cb053b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/webgl-logo-256.8193c45a.jpg\";","import {\r\n    WebGLRenderer,\r\n    Scene,\r\n    PerspectiveCamera,\r\n    TextureLoader,\r\n    MeshBasicMaterial,\r\n    BoxGeometry,\r\n    Mesh\r\n} from \"three\"\r\nimport texture from \"./images/webgl-logo-256.jpg\"\r\n\r\nexport default class GL {\r\n\r\n    renderer\r\n    scene\r\n    camera\r\n    cube\r\n    currentTime = Date.now()\r\n\r\n    constructor(){\r\n        const canvas = document.querySelector(\"#webglcanvas\")\r\n        console.log(canvas)\r\n        this.renderer = new WebGLRenderer({\r\n            canvas,\r\n            antialias: true\r\n        })\r\n        const {width, height} = canvas\r\n        this.renderer.setSize(width, height)\r\n        this.scene = new Scene()\r\n        this.camera = new PerspectiveCamera(\r\n            45,\r\n            width / height,\r\n            1,\r\n            4000\r\n        )\r\n        const map = new TextureLoader().load(texture)\r\n        const material = new MeshBasicMaterial({map})\r\n        const geometry = new BoxGeometry(2, 2, 2)\r\n        this.cube = new Mesh(geometry, material)\r\n\r\n        this.cube.position.z = -8\r\n        this.cube.rotation.x = Math.PI / 5\r\n        this.cube.rotation.y = Math.PI / 5\r\n\r\n        this.scene.add(this.cube)\r\n    }\r\n\r\n    render = () => {\r\n        this.renderer.render(\r\n            this.scene,\r\n            this.camera\r\n        )\r\n    }\r\n\r\n    animate = () => {\r\n        const now = Date.now()\r\n        const deltaTime = now - this.currentTime\r\n        this.currentTime = now\r\n        const fracTime = deltaTime / 1000\r\n        const angle = 0.1 * Math.PI * 2 * fracTime\r\n        this.cube.rotation.y += angle\r\n    }\r\n\r\n    run = () => {\r\n        requestAnimationFrame(this.run)\r\n        this.render()\r\n        this.animate()\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport GL from \"./GL\"\r\nimport \"./css/basic.css\"\r\n\r\nclass Q1 extends Component {\r\n\r\n  componentDidMount = () => {\r\n    const gl = new GL()\r\n    gl.run()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas \r\n      id=\"webglcanvas\"\r\n      style={{\r\n        border: \"none\",\r\n        backgroundColor: \"black\"\r\n      }}\r\n      width=\"600\" height=\"500\"\r\n      >\r\n      </canvas>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Q1;\r\n","import React, { Component } from 'react';\nimport Q1 from \"./Q1\"\n\n\nclass App extends Component {\n\n  componentDidMount = () => {\n    if(!window.WebGLRenderingContext){\n      alert(\"Guess even babel-polyfill doesn't save IE.\")\n    }\n  }\n\n  render() {\n    return (\n      <Q1 />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"babel-polyfill\"\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./css/basic.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}